{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\nimport math\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\ncontroller = Controller()\nleft_drive_smart = Motor(Ports.PORT11, 1.0, False)\nright_drive_smart = Motor(Ports.PORT5, 1.0, True)\n\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, brain_inertial, 200)\nsuper180_motor_a = Motor(Ports.PORT9, False)\nsuper180_motor_b = Motor(Ports.PORT3, True)\nsuper180 = MotorGroup(super180_motor_a, super180_motor_b)\nMyPneumatic = Pneumatic(Ports.PORT12)\nbeamlift2_motor_a = Motor(Ports.PORT4, True)\nbeamlift2_motor_b = Motor(Ports.PORT10, False)\nbeamlift2 = MotorGroup(beamlift2_motor_a, beamlift2_motor_b)\n\n\n\n# generating and setting random seed\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    xaxis = brain_inertial.acceleration(XAXIS) * 1000\n    yaxis = brain_inertial.acceleration(YAXIS) * 1000\n    zaxis = brain_inertial.acceleration(ZAXIS) * 1000\n    systemTime = brain.timer.system() * 100\n    urandom.seed(int(xaxis + yaxis + zaxis + systemTime)) \n    \n# Initialize random seed \ninitializeRandomSeed()\n\nvexcode_initial_drivetrain_calibration_completed = False\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    global vexcode_initial_drivetrain_calibration_completed\n    if not vexcode_initial_drivetrain_calibration_completed:\n        MyPneumatic.pump_off()\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    brain_inertial.calibrate()\n    while brain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    if not vexcode_initial_drivetrain_calibration_completed:\n        MyPneumatic.pump_on()\n    vexcode_initial_drivetrain_calibration_completed = True\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n\n# Calibrate the Drivetrain\ncalibrate_drivetrain()\n\n\n\n# define variables used for controlling motors based on controller inputs\nf_buttons_control_motors_stopped = True\ndrivetrain_needs_to_be_stopped_controller = False\n\n# define a task that will handle monitoring inputs from controller\ndef rc_auto_loop_function_controller():\n    global drivetrain_needs_to_be_stopped_controller, f_buttons_control_motors_stopped, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            \n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axisA + axisB\n            # right = axisA - axisB\n            drivetrain_left_side_speed_1 = controller.axisA.position() + controller.axisB.position()\n            drivetrain_right_side_speed_1 = controller.axisA.position() - controller.axisB.position()\n\n            drivetrain_left_side_speed_2 = -controller.axisD.position() + controller.axisC.position()\n            drivetrain_right_side_speed_2 = -controller.axisD.position() - controller.axisC.position()\n\n            drivetrain_left_side_speed = drivetrain_left_side_speed_1 + drivetrain_left_side_speed_2\n            drivetrain_right_side_speed = drivetrain_right_side_speed_1 + drivetrain_right_side_speed_2\n            \n            # check if the values are inside of the deadband range\n            if abs(drivetrain_left_side_speed) < 5 and abs(drivetrain_right_side_speed) < 5:\n                # check if the motors have already been stopped\n                if drivetrain_needs_to_be_stopped_controller:\n                    # stop the drive motors\n                    left_drive_smart.stop()\n                    right_drive_smart.stop()\n                    # tell the code that the motors have been stopped\n                    drivetrain_needs_to_be_stopped_controller = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the motors next\n                # time the input is in the deadband range\n                drivetrain_needs_to_be_stopped_controller = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_needs_to_be_stopped_controller:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_needs_to_be_stopped_controller:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n            # check the buttonFUp/buttonFDown status\n            # to control beamlift2\n            if controller.buttonFUp.pressing():\n                beamlift2.spin(FORWARD)\n                f_buttons_control_motors_stopped = False\n            elif controller.buttonFDown.pressing():\n                beamlift2.spin(REVERSE)\n                f_buttons_control_motors_stopped = False\n            elif not f_buttons_control_motors_stopped:\n                beamlift2.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                f_buttons_control_motors_stopped = True\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller = Thread(rc_auto_loop_function_controller)\n\n#endregion VEXcode Generated Robot Configuration\n\nscreen_precision = 0\nconsole_precision = 0\nfrontclaw = False\nbackclaw = False\nlast_press_time = 0\npinclaw = 0\narm_position = 0\n\ndef grab_pin():\n    global frontclaw, backclaw, last_press_time, pinclaw, arm_position, screen_precision, console_precision\n    super180.spin_to_position(0, DEGREES)\n    drivetrain.set_drive_velocity(30, PERCENT)\n    drivetrain.drive(FORWARD)\n    wait(0.3, SECONDS)\n    MyPneumatic.extend(CYLINDER1)\n    drivetrain.stop()\n    frontclaw = False\n\ndef release_pin():\n    global frontclaw, backclaw, last_press_time, pinclaw, arm_position, screen_precision, console_precision\n    MyPneumatic.retract(CYLINDER1)\n    frontclaw = True\n    super180.spin_to_position(0, DEGREES)\n\ndef when_started1():\n    global frontclaw, backclaw, last_press_time, pinclaw, arm_position, screen_precision, console_precision\n    brain.screen.print(\"MIAM cookin\")\n    super180.set_velocity(120, PERCENT)\n    super180.set_stopping(HOLD)\n    beamlift2.set_stopping(HOLD)\n    super180.spin_to_position(0, DEGREES)\n    beamlift2.spin_to_position(0, DEGREES)\n    super180.set_max_torque(100, PERCENT)\n    beamlift2.set_max_torque(100, PERCENT)\n    MyPneumatic.retract(CYLINDER2)\n    backclaw = True\n    MyPneumatic.retract(CYLINDER1)\n    frontclaw = True\n\ndef controllerbuttonLUp_pressed_callback_0():\n    global frontclaw, backclaw, last_press_time, pinclaw, arm_position, screen_precision, console_precision\n    if frontclaw:\n        grab_pin()\n        wait(0.13, SECONDS)\n        super180.spin_for(FORWARD, 200, DEGREES)\n    else:\n        release_pin()\n\ndef controllerbuttonRUp_pressed_callback_0():\n    global frontclaw, backclaw, last_press_time, pinclaw, arm_position, screen_precision, console_precision\n    if backclaw:\n        drivetrain.set_drive_velocity(30, PERCENT)\n        drivetrain.drive_for(REVERSE, 15, MM)\n        wait(0.2, SECONDS)\n        MyPneumatic.extend(CYLINDER2)\n        backclaw = False\n    else:\n        MyPneumatic.retract(CYLINDER2)\n        backclaw = True\n\ndef controllerbuttonLDown_pressed_callback_0():\n    global frontclaw, backclaw, last_press_time, pinclaw, arm_position, screen_precision, console_precision\n    # This is to stack pin\n    drivetrain.drive_for(REVERSE, 15, MM)\n    wait(0.2, SECONDS)\n    super180.set_velocity(50, PERCENT)\n    super180.spin_to_position(120, DEGREES)\n    release_pin()\n    wait(0.1, SECONDS)\n    grab_pin()\n    super180.set_velocity(100, PERCENT)\n\ndef controllerbuttonRDown_pressed_callback_0():\n    global frontclaw, backclaw, last_press_time, pinclaw, arm_position, screen_precision, console_precision\n    drivetrain.set_drive_velocity(100, PERCENT)\n    drivetrain.drive_for(FORWARD, 6, INCHES)\n    drivetrain.set_drive_velocity(100, PERCENT)\n\ndef controllerbuttonEUp_pressed_callback_0():\n    global frontclaw, backclaw, last_press_time, pinclaw, arm_position, screen_precision, console_precision\n    if arm_position == 0:\n        super180.spin_to_position(200, DEGREES)\n        arm_position = 1\n    else:\n        super180.spin_to_position(930, DEGREES)\n        arm_position = 0\n\ndef controlleraxisDChanged_callback_0():\n    global frontclaw, backclaw, last_press_time, pinclaw, arm_position, screen_precision, console_precision\n    pass\n\ndef controllerbuttonEDown_pressed_callback_0():\n    global frontclaw, backclaw, last_press_time, pinclaw, arm_position, screen_precision, console_precision\n    super180.set_velocity(50, PERCENT)\n    super180.spin(REVERSE)\n\ndef controlleraxisCChanged_callback_0():\n    global frontclaw, backclaw, last_press_time, pinclaw, arm_position, screen_precision, console_precision\n    pass\n\ndef controllerbuttonEDown_released_callback_0():\n    global frontclaw, backclaw, last_press_time, pinclaw, arm_position, screen_precision, console_precision\n    super180.stop()\n    super180.set_velocity(120, PERCENT)\n\n# system event handlers\ncontroller.buttonLUp.pressed(controllerbuttonLUp_pressed_callback_0)\ncontroller.buttonRUp.pressed(controllerbuttonRUp_pressed_callback_0)\ncontroller.buttonLDown.pressed(controllerbuttonLDown_pressed_callback_0)\ncontroller.buttonRDown.pressed(controllerbuttonRDown_pressed_callback_0)\ncontroller.buttonEUp.pressed(controllerbuttonEUp_pressed_callback_0)\ncontroller.axisD.changed(controlleraxisDChanged_callback_0)\ncontroller.buttonEDown.pressed(controllerbuttonEDown_pressed_callback_0)\ncontroller.axisC.changed(controlleraxisCChanged_callback_0)\ncontroller.buttonEDown.released(controllerbuttonEDown_released_callback_0)\n# add 15ms delay to make sure events are registered correctly.\nwait(15, MSEC)\n\nwhen_started1()\n","textLanguage":"python","robotConfig":[{"port":[],"name":"controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"beamlift2","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"arcadel"},"triportSourcePort":22},{"port":[11,5,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","gyroType":"integrated","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[9,3],"name":"super180","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[12],"name":"MyPneumatic","customName":true,"deviceType":"Pneumatic","deviceClass":"pneumatic","setting":{"cylinder1":"pinclaw","cylinder2":"beamclaw","cylinder1_reversed":"false","cylinder2_reversed":"false"},"triportSourcePort":22},{"port":[4,10],"name":"beamlift2","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22}],"slot":1,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"4.62.0","minVersion":"4.60.0","fileFormat":"2.0.0","targetBrainGen":"Second","v5SoundsEnabled":false,"aiVisionSettings":{"colors":[],"codes":[],"tags":true,"AIObjects":true,"AIObjectModel":[],"aiModelDropDownValue":null},"target":"Physical"}